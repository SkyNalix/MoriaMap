################################################## Version mise à jour pour supporter les arêtes de marche à pied
- public String TransportNetwork.getRouteDescription(List<Edge> route, LocalTime startTime):
    // startTime doit être exactement le même que l'heure utilisée pour calculer les poids temporels sur chaque TransportSegment

    LocalTime cur = startTime
    List<LocalTime> lts = empty()
    Pour Edge e dans route:
        if e est un TransportSegment:
            Passages p = tn.getPassages(e.getFrom())
            LocalTime next = p.getNextWithWrap(cur, e.variantName(), e.lineName())
            ajouter next à lts
            cur = next + e.getTravelTime()
        else: // e est un WalkSegment
            ajouter cur à lts
            cur = cur + e.walkTime()

    // ici retourner l'affichage complet du trajet avec horaire TODO Arbi

################################################## Old
-NOTES-
    Passages est un wrapper de List<TransportSchedule>, correspondant aux
    horaires de passage par un Stop donné. La classe fournit une méthode
    getNext(LocalTime, String, String) retournant le plus petit horaire de
    passage tel que l'horaire de passage est plus grand que le LocalTime en
    argument et dans le Variant spécifié par son nom, de la Line spécifiée par
    son nom. S'il n'y a pas de passage après le LocalTime donné, considérer le
    jour suivant => retourner le premier passage.
    
    L'algorithme présenté ne donne pas l'horaire d'arrivée, qui devra être
    calculer en récupérant le dernier élément de ROUTE et de RES pour
    additionner le TRAVEL_TIME du dernier TSeg à l'horaire de départ du dernier
    TSch-> à faire dans l'algo ou non.
-IN-
    ROUTE := List<TransportSegment> // obtenue par DFS, le premier Stop est src,
                                    // le dernier est dst.
-OUT-
    List<TransportSchedule> // liste d'horaires de depart par chaque from du
                            // trajet, dans l'ordre d'apparition.
-PROC-
    LocalTime CUR := récupérer le temps courant
    List<TSch> RES := liste vide
    Pour TSEG dans ROUTE:
        Passages P := récupérer les départs de transport à TSEG.FROM
        TSch NEXT := P.getNext(CUR, TSEG.VARIANT_NAME, TSEG.LINE_NAME)
        ajouter NEXT à RES
        CUR = NEXT.time() + TSEG.TRAVEL_TIME
    retourner RES

